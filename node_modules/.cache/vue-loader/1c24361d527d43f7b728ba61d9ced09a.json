{"remainingRequest":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/src/views/curso/Tema4.vue?vue&type=template&id=3f69abe3&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/src/views/curso/Tema4.vue","mtime":1746509316570},{"path":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Derechos_ninios_y_ninias/U2_Derechos_ninios_y_ninias/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}